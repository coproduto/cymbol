package walker;

import org.antlr.v4.runtime.*;
import autogenerated.CymbolBaseVisitor;
import autogenerated.CymbolParser;

import graph.CallGraph;

public class CymbolCallGraphVisitor extends CymbolBaseVisitor<CallGraph> {
	private final CallGraph graph = new CallGraph();
	private Token currentFunc = null;
	
	@Override public CallGraph visitFile(CymbolParser.FileContext ctx) {
		System.out.println("Entering file");
		visitChildren(ctx);
		System.out.println("Exiting file");
		return graph;
	}
	
    @Override public CallGraph visitFuncDecl(CymbolParser.FuncDeclContext ctx) { 
    	if(!graph.declareToken(ctx.ID().getSymbol())) {
    		System.out.println("Dropped repeated token " + ctx.ID().getSymbol());
    	}
		
        currentFunc = ctx.ID().getSymbol();
        return visitChildren(ctx); 
    }
   
    @Override public CallGraph visitFunctionCallExpr(CymbolParser.FunctionCallExprContext ctx) { 
		if(currentFunc != null) {
			graph.assertFunctionCall(currentFunc, ctx.ID().getSymbol());
		}
		
        return visitChildren(ctx); 
    }    
}
